datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  User
  Admin
}

enum SubmissionStatus {
  Pending
  Submitted
  Rejected
  Accepted
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String           @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  role             Role             @default(User)

  pushSubscription PushSubscriber[]
  purchases   Purchase[]
  questionAnswer QuestionAnswer[]
  questions      Question[]

  assignmentSubmissions AssignmentSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model PushSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String
  auth      String
  p256dh    String
  
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}


model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  tags        String[] @default([])

  courses     Course[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  tags        String[] @default([])

  categoryId  String?  @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  purchases   Purchase[]
  // questions   Question[]
  // teachers    CourseTeacher[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}


model Chapter {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  videoThumbnail String?
  videoLength   Int?
  videoPlayer   String?
  position      Int?
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)

  courseId      String         @db.ObjectId
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress  UserProgress[]
  attachments   Attachment[]
  questions     Question[]
  assignments   Assignment?
  submissions   AssignmentSubmission[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([courseId])
}

model Attachment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  url         String

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
}


model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId

  userId      String   @db.ObjectId

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}


model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId, userId])
}


model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String

  chapterId String   @db.ObjectId
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  answers   QuestionAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}


model QuestionAnswer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  answer    String   

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
}



model Assignment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  dueDate     DateTime?
  fileUrl     String?
  
  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  submissions AssignmentSubmission[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([chapterId])
}

model AssignmentSubmission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  fileUrl      String?  
  submittedAt  DateTime @default(now()) 
  status       SubmissionStatus @default(Pending)
  feedback     String?

  chapterId    String   @db.ObjectId
  chapter      Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  assignmentId String   @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([chapterId])
  @@index([userId])
  @@index([assignmentId])
}

model Notice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

